plugins {
    id 'java'
    id 'application'
}

group = 'com.paydash'
version = '1.0.0'

java {
    sourceCompatibility = '21'
}

repositories {
    mavenCentral()
}

ext {
    flinkVersion = '1.18.1'
    kafkaVersion = '3.6.1'
    cassandraVersion = '4.17.0'
    redisVersion = '4.4.6'
    clickhouseVersion = '0.4.6'
    jacksonVersion = '2.16.1'
}

dependencies {
    // Flink Core
    implementation "org.apache.flink:flink-streaming-java:${flinkVersion}"
    implementation "org.apache.flink:flink-clients:${flinkVersion}"
    
    // Kafka client (direct dependency for simpler integration)
    implementation "org.apache.kafka:kafka-clients:${kafkaVersion}"
    
    // Redis client (no official Flink connector, using Jedis)
    implementation "redis.clients:jedis:${redisVersion}"
    
    // Cassandra driver (correct version)
    implementation "com.datastax.oss:java-driver-core:4.17.0"
    implementation "com.datastax.oss:java-driver-query-builder:4.17.0"
    
    // ClickHouse client
    implementation "com.clickhouse:clickhouse-jdbc:${clickhouseVersion}"
    implementation "com.clickhouse:clickhouse-http-client:${clickhouseVersion}"
    
    // JSON processing
    implementation "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}"
    implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonVersion}"
    
    // Logging
    implementation "org.slf4j:slf4j-api:2.0.9"
    implementation "ch.qos.logback:logback-classic:1.4.14"
    
    // Test dependencies
    testImplementation "org.apache.flink:flink-test-utils:${flinkVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter:5.10.1"
    testImplementation platform('org.junit:junit-bom:5.10.1')
}

application {
    mainClass = 'com.paydash.eventprocessor.SimpleEventProcessorJob'
}

tasks.named('test') {
    useJUnitPlatform()
}

// Flink job packaging
jar {
    manifest {
        attributes 'Main-Class': 'com.paydash.eventprocessor.SimpleEventProcessorJob'
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}